<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006">

    <!--  SimpleStyles.XAML defines a set of control styles which are simplified starting points for creating your own controls  -->

    <!--
        Brushes : These are used to define the color for background, foreground, selection, enabled etc of all controls
        If you want to change the color of a control you can just chnage the brush; if you want to add a new shape or change arrangement then also edit the template
    -->

    <!--  Style and Template pairs are used to define each control Part  -->
    <!--  The Style provides default values on the control; the Template gives the elements for each control  -->

    <!--
        Simple ComboBox
        This uses the ComboBoxToggleButton to expand and collapse a Popup control
        SimpleScrollViewer to allow items to be scrolled and SimpleComboBoxItem to define the look of each item
        The Popup shows a list of items in a StackPanel
    -->

    <!--<Style x:Key="SimpleComboBox" TargetType="{x:Type ComboBox}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Grid>
						<ToggleButton Grid.Column="2" Template="{StaticResource ComboBoxToggleButton}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
						<ContentPresenter HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>
						
                        <TextBox Visibility="Hidden" Template="{StaticResource ComboBoxTextBox}" Margin="3,3,23,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}"/>
						
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Scroll">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True" Visibility="Hidden">
                                <Border x:Name="DropDownBorder" Background="{StaticResource WindowBackgroundBrush}" BorderBrush="{StaticResource SolidBorderBrush}" BorderThickness="1" CornerRadius="0"/>
								<ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
						
									<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
								
								</ScrollViewer>
							</Grid>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>						
						<Trigger Property="HasItems" Value="false">
							<Setter Property="MinHeight" Value="95" TargetName="DropDownBorder"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
						</Trigger>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
						</Trigger>
						<Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
							<Setter Property="CornerRadius" Value="0" TargetName="DropDownBorder"/>
							<Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
						</Trigger>
						<Trigger Property="IsEditable" Value="true">
							<Setter Property="IsTabStop" Value="false"/>
							<Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
							<Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>-->

    <!--  Simple ComboBoxItem - This is used for each item inside of the ComboBox. You can change the selected color of each item below  -->
    <!--<Style x:Key="SimpleComboBoxItem" d:IsControlPart="True" TargetType="{x:Type ComboBoxItem}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Grid SnapsToDevicePixels="true">
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsHighlighted" Value="true">
							<Setter Property="Background" Value="{StaticResource SelectedBackgroundBrush}" TargetName="Border"/>
						</Trigger>
						
						<Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>-->

    <!--  NormalBrush is used as the Background for SimpleButton, SimpleRepeatButton  -->
    <SolidColorBrush x:Key="NormalBrush" Color="#FFEAEAEA" />
    <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#FF979797" />
        <GradientStop Offset="1.0" Color="#FF979797" />
    </LinearGradientBrush>

    <!--  LightBrush is used for content areas such as Menu, Tab Control background  -->
    <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#FFF" />
        <GradientStop Offset="1.0" Color="#EEE" />
    </LinearGradientBrush>

    <!--  MouseOverBrush is used for MouseOver in Button, Radio Button, CheckBox  -->
    <LinearGradientBrush x:Key="MouseOverBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#FFF" />
        <GradientStop Offset="1.0" Color="White" />
    </LinearGradientBrush>

    <!--  PressedBrush is used for Pressed in Button, Radio Button, CheckBox  -->
    <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#BBB" />
        <GradientStop Offset="0.1" Color="#EEE" />
        <GradientStop Offset="0.9" Color="#EEE" />
        <GradientStop Offset="1.0" Color="#FFF" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#444" />
        <GradientStop Offset="1.0" Color="#FF444444" />
    </LinearGradientBrush>

    <!--  SelectedBackgroundBrush is used for the Selected item in ListBoxItem, ComboBoxItem  -->
    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />

    <!--  Disabled Brushes are used for the Disabled look of each control  -->
    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />
    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />

    <!--  Used for background of ScrollViewer, TreeView, ListBox, Expander, TextBox, Tab Control  -->
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF" />

    <!--  DefaultedBorderBrush is used to show KeyBoardFocus  -->
    <LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="Black" />
        <GradientStop Offset="1.0" Color="#000" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />
    <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA" />
    <SolidColorBrush x:Key="LightColorBrush" Color="#DDD" />

    <!--  Used for Checkmark, Radio button, TreeViewItem, Expander ToggleButton glyphs  -->
    <SolidColorBrush x:Key="GlyphBrush" Color="#444" />

    <!--  SimpleButtonFocusVisual is used to show keyboard focus around a SimpleButton control  -->
    <Style x:Key="SimpleButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle
                            Margin="2"
                            Stroke="#60000000"
                            StrokeDashArray="1 2"
                            StrokeThickness="1" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Simple Button - This control sets brushes on each state. Note that these brushes must be listed above since they are static resources  -->
    <Style
        x:Key="SimpleButton"
        BasedOn="{x:Null}"
        TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!--  We use Grid as a root because it is easy to add more elements to customize the button  -->
                    <Grid x:Name="Grid">
                        <Border
                            x:Name="Border"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" />

                        <!--  Content Presenter is where the text content etc is placed by the control  -->
                        <!--  The bindings are useful so that the control can be parameterized without editing the template  -->
                        <ContentPresenter
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            RecognizesAccessKey="True" />
                    </Grid>

                    <!--  Each state sets a brush on the Border in the template  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true" />
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Simple ComboBox Toggle Button - This is used in ComboBox to expand and collapse the ComboBox Popup  -->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <!--  ColumnDefinition Width="16"/  -->
            </Grid.ColumnDefinitions>
            <Rectangle
                x:Name="Rectangle"
                Grid.ColumnSpan="2"
                Width="Auto"
                Height="Auto"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Fill="{DynamicResource NormalBrush}"
                RadiusX="0"
                RadiusY="0" />
            <Rectangle
                Grid.Column="0"
                Width="Auto"
                Height="Auto"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Fill="{DynamicResource WindowBackgroundBrush}"
                RadiusX="0"
                RadiusY="0" />
            <!--  Path Grid.Column="1" HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z"/  -->
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource MouseOverBrush}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource PressedBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" />
                <Setter TargetName="Rectangle" Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                <!--  Setter Property="Fill" Value="{DynamicResource DisabledForegroundBrush}" TargetName="Arrow"/  -->
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  This is the area which contains the selected item in the ComboBox  -->

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border Background="{TemplateBinding Background}">
            <ScrollViewer
                x:Name="PART_ContentHost"
                Margin="0"
                Background="{TemplateBinding Background}" />
        </Border>
    </ControlTemplate>

    <!--
        Simple SimpleProgressBar
        The template uses two Border controls to show the Track and Progress
        Limitations : It only supports a horizontal orientated ProgressBar
    -->
    <Style x:Key="SimpleProgressBar" TargetType="{x:Type ProgressBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid>

                        <!--  This Border is the track. It must be named PART_Track  -->
                        <Border
                            x:Name="PART_Track"
                            Background="{DynamicResource PressedBrush}"
                            BorderBrush="#CCA7A7A7"
                            BorderThickness="1"
                            CornerRadius="0" />

                        <!--  This Border shows progress. It must be named PART_Indicator for the control to function  -->
                        <Border
                            x:Name="PART_Indicator"
                            Margin="0,1"
                            HorizontalAlignment="Left"
                            Background="#990099D0"
                            BorderBrush="#D80099D0"
                            BorderThickness="1"
                            CornerRadius="0" />

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Simple TextBox  -->
    <Style x:Key="SimpleTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border
                            x:Name="Border"
                            Padding="2"
                            Background="{DynamicResource WindowBackgroundBrush}"
                            BorderBrush="{DynamicResource SolidBorderBrush}"
                            BorderThickness="1"
                            CornerRadius="0">

                            <!--  The implementation places the Content into the ScrollViewer. It must be named PART_ContentHost for the control to function  -->
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Margin="0"
                                Background="{TemplateBinding Background}" />

                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
